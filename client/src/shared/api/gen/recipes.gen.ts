/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * Food Mood
 * OpenAPI spec version: 1.0.0
 */
/**
 * @nullable
 */
export type ProfileDTOSex = typeof ProfileDTOSex[keyof typeof ProfileDTOSex] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ProfileDTOSex = {
  male: 'male',
  female: 'female',
} as const;

/**
 * @nullable
 */
export type ProfileDTOPrefs = { [key: string]: unknown } | null;

export interface ProfileDTO {
  id: number;
  userId: number;
  /** @nullable */
  sex: ProfileDTOSex;
  /** @nullable */
  birthDate: string | null;
  /** @nullable */
  heightCm: number | null;
  /** @nullable */
  weightKg: number | null;
  /** @nullable */
  bmi: number | null;
  /** @nullable */
  prefs: ProfileDTOPrefs;
}

export interface PrefsDto { [key: string]: unknown }

export type PatchProfileDTOSex = typeof PatchProfileDTOSex[keyof typeof PatchProfileDTOSex];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PatchProfileDTOSex = {
  male: 'male',
  female: 'female',
} as const;

export interface PatchProfileDTO {
  sex?: PatchProfileDTOSex;
  birthDate?: string;
  heightCm?: number;
  weightKg?: number;
  prefs?: PrefsDto;
}

export interface SignInBodyDTO {
  provider: string;
  email?: string;
  password?: string;
  /** Google ID tocken (JWT) */
  idToken?: string;
}

export interface SignUpBodyDTO {
  provider: string;
  email?: string;
  password?: string;
  /** Google ID tocken (JWT) */
  idToken?: string;
}

export interface GetSessionInfoDto {
  id: number;
  email: string;
  iat: number;
  exp: number;
}

export interface RecipeFiltersDto {
  includeIngredients?: string[];
  excludeIngredients?: string[];
  minKcal?: number;
  maxKcal?: number;
  minSugar?: number;
  maxSugar?: number;
  minProt?: number;
  maxProt?: number;
}

export interface IngredientDto {
  id: number;
  recipeId: number;
  name: string;
  amount: number;
  unit: string;
  grams: number;
  kcalTotal: number;
  protTotal: number;
  fatTotal: number;
  carbTotal: number;
  sugarTotal: number;
  createdAt: string;
  updatedAt: string;
}

/**
 * @nullable
 */
export type RecipeDtoAuthorProfileId = { [key: string]: unknown } | null;

export type RecipeDtoSteps = { [key: string]: unknown };

export interface RecipeDto {
  id: number;
  /** @nullable */
  authorProfileId: RecipeDtoAuthorProfileId;
  title: string;
  steps: RecipeDtoSteps;
  picture_url: string;
  servings: number;
  kcalPerServ: number;
  protPerServ: number;
  fatPerServ: number;
  carbPerServ: number;
  sugarPerServ: number;
  ingredients: IngredientDto[];
  createdAt: string;
  updatedAt: string;
}

export interface PageMetaDto {
  total: number;
  page: number;
  limit: number;
  pages: number;
}

export interface RecipeListDto {
  recipes: RecipeDto[];
  meta: PageMetaDto;
}

export interface RecipeListLiteDto {
  recipes: RecipeDto[];
}

export type AddIngredientDtoOpts = { [key: string]: unknown };

export interface AddIngredientDto {
  name: string;
  amount: number;
  unit: string;
  opts?: AddIngredientDtoOpts;
}

export type AddRecipeDtoSteps = { [key: string]: unknown };

export interface AddRecipeDto {
  title: string;
  steps: AddRecipeDtoSteps;
  picture_url: string;
  servings: number;
  ingredients: AddIngredientDto[];
}

export type PatchRecipeDtoSteps = { [key: string]: unknown };

export interface PatchRecipeDto {
  title?: string;
  steps?: PatchRecipeDtoSteps;
  picture_url?: string;
  servings?: number;
  ingredients?: AddIngredientDto[];
}

export interface IngredientWeightDto {
  id: number;
  normalizedName: string;
  gramsPerPiece: number;
  source: string;
}

export interface AddMealLogDto {
  recipeId: number;
  servings: number;
  eatenAt?: string;
  moodScore?: number;
  energyScore?: number;
  sleepScore?: number;
}

export interface MealLogDto {
  id: number;
  userProfileId: number;
  recipeId: number;
  servings: number;
  eatenAt: string;
  /** @nullable */
  moodScore: number | null;
  /** @nullable */
  energyScore: number | null;
  /** @nullable */
  sleepScore: number | null;
}

export interface PatchMealLogDto {
  servings?: number;
  eatenAt?: string;
  moodScore?: number;
  energyScore?: number;
  sleepScore?: number;
}

export type GetAnalyticsByTimeDtoTotal = { [key: string]: unknown };

export interface GetAnalyticsByTimeDto {
  total?: GetAnalyticsByTimeDtoTotal;
  series?: string[];
}

export interface GetTopIngredientsDto { [key: string]: unknown }

export type GetNutrientsScoreDtoMetric = typeof GetNutrientsScoreDtoMetric[keyof typeof GetNutrientsScoreDtoMetric];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetNutrientsScoreDtoMetric = {
  kcal: 'kcal',
  prot: 'prot',
  fat: 'fat',
  carb: 'carb',
  sugar: 'sugar',
} as const;

/**
 * Simplified correlation score showing how this nutrient relates to mood, energy, and sleep. Range from -1 to 1: negative means worse effect, positive means better effect.
 */
export type GetNutrientsScoreDtoCorrelation = { [key: string]: unknown };

export interface GetNutrientsScoreDto {
  metric: GetNutrientsScoreDtoMetric;
  totalConsumed: number;
  /** Simplified correlation score showing how this nutrient relates to mood, energy, and sleep. Range from -1 to 1: negative means worse effect, positive means better effect. */
  correlation: GetNutrientsScoreDtoCorrelation;
  /** Daily breakdown showing how much of this nutrient was consumed each day and what mood, energy, and sleep scores were recorded by the user */
  details: string[];
}

export interface RecommendationItemDto {
  recipeId: number;
  title: string;
  picture_url: string;
  score: number;
  ingredients: string[];
}

export interface GetRecommendationsDto {
  items: RecommendationItemDto[];
}

export interface ExplainBreakdownDto {
  /** Ingredient affinity contribution */
  affinity: number;
  /** Diet/allergies match contribution */
  prefs: number;
  /** Nutrient influence for the selected objective (e.g., sleep) */
  nutrientsObjective: number;
  /** Similar-profile users feedback contribution */
  profileSimilarity: number;
}

export interface ExplainRecommendationDto {
  recipeId: number;
  score: number;
  breakdown: ExplainBreakdownDto;
  reasons: string[];
}


